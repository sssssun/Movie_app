{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","className","src","title","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callapi","sent","setState","stop","fetch","then","response","json","data","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA4DA,SAASA,EAATC,GAAkC,IAAZC,EAAYD,EAAZC,OAAOC,EAAKF,EAALE,IACzB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBC,IAAKN,EAAQC,IAAKA,EAAKM,MAAON,IAIrE,SAASO,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACIR,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBK,GAmBzBC,MAvDf,SAAAC,GAA8C,IAA9BL,EAA8BK,EAA9BL,MAAMP,EAAwBY,EAAxBZ,OAAOa,EAAiBD,EAAjBC,OAAOC,EAAUF,EAAVE,SAChC,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKM,KAEtCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAKG,GACLL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVQ,EAAOE,IAAI,SAACL,EAAMM,GAAP,OAAiBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAEhEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACIgB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCyCbC,6MAnFbC,MAAM,KA8CNC,cAAc,WAUZ,OATeC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GAEnC,OADAC,QAAQC,IAAIF,GACL3B,EAAAC,EAAAC,cAAC4B,EAAD,CACPzB,MAAOsB,EAAMI,cACbjC,OAAQ6B,EAAMK,mBACdjB,IAAKY,EAAMM,GACXtB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAKpBsB,gCAAY,SAAAC,IAAA,IAAAT,EAAA,OAAAU,EAAAnC,EAAAoC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAESf,EAAKgB,WAFd,OAEJf,EAFIY,EAAAI,KAGVjB,EAAKkB,SAAS,CACZjB,WAJQ,wBAAAY,EAAAM,SAAAT,QAQZM,SAAS,WACP,OAAOI,MAAM,yDACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKvB,SACvBwB,MAAM,SAAAC,GAAG,OAAIvB,QAAQC,IAAIsB,yFA5B1BC,KAAKlB,8CAgCL,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZiD,KAAK7B,MAAMG,OAAS0B,KAAK5B,gBAAkB,kBA/ElC6B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.405fa8d8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Movie.css';\nimport LinesEllipsis from 'react-lines-ellipsis'\n\n\n\n// class Movie extends Component{\n\n//     static propTypes={\n//         title: PropTypes.string.isRequired,\n//         poster: PropTypes.string.isRequired\n//       }\n    \n//     render(){\n//         return(\n//             <div>\n//                 <MoviePoster poster={this.props.poster}/>\n//                 <h1>{this.props.title}</h1>\n//             </div>\n//         )\n//     }\n// }\n\n// class MoviePoster extends Component{\n//     render(){\n//         return(\n//             <img src={this.props.poster}></img>\n//         )\n//     }\n// }\n\nfunction Movie({title,poster,genres,synopsis}){\n    return(\n        <div className=\"Movie\">\n            <div className=\"Movie__Column\">\n                <MoviePoster poster={poster} alt={title}/>\n            </div>\n            <div className=\"Movie__Column\">\n                <h1>{title}</h1>\n                <div className=\"Movie__Genres\">\n                    {genres.map((genre,index) => <MovieGenre genre={genre} key={index}/>)}\n                </div>\n                <div className=\"Movie__Synopsis\">\n                <LinesEllipsis\n                    text={synopsis}\n                    maxLine='5'\n                    ellipsis='...'\n                    trimRight\n                    basedOn='letters'\n                />\n\n                </div>\n            </div>\n            \n            \n        </div>\n    )\n}\n\nfunction MoviePoster({poster,alt}){\n    return(\n        <img className=\"Movie__Poster\" src={poster} alt={alt} title={alt}></img>\n    )\n}\n\nfunction MovieGenre({genre}){\n    return(\n        <span className=\"Movie__Genre\">{genre}</span>\n    )\n}\n\nMovie.propTypes={\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes={\n    poster: PropTypes.string.isRequired\n}\n\nMovieGenre.propTypes={\n    genre: PropTypes.string.isRequired\n}\n\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n\nclass App extends Component {\n\n  state={\n    \n  }\n\n  // componentDidMount(){\n  //   setTimeout(() => {\n  //     this.setState({\n  //       Movies:[\n  //         //이전 영화 리스트 그대로 두고 하나 추가 \n  //         //계속 추가 컨텐츠를 로딩 \n  //         //...this.state.Movies,(만약 state에 Movies가 저장되어 있다면)\n  \n  //           {\n  //             title:\"Matrix\",\n  //             poster:\"https://upload.wikimedia.org/wikipedia/en/c/c1/The_Matrix_Poster.jpg\"\n  //           },\n  //           {\n  //             title:\"OldBoy\",\n  //             poster:\"https://upload.wikimedia.org/wikipedia/en/thumb/6/67/Oldboykoreanposter.jpg/220px-Oldboykoreanposter.jpg\"\n  //           },\n  //           {\n  //             title:\"Mission Impossible\",\n  //             poster:\"https://m.media-amazon.com/images/M/MV5BNjRlZmM0ODktY2RjNS00ZDdjLWJhZGYtNDljNWZkMGM5MTg0XkEyXkFqcGdeQXVyNjAwMjI5MDk@._V1_.jpg\"\n  //           },\n  //           {\n  //             title:\"InterStellar\",\n  //             poster:\"https://upload.wikimedia.org/wikipedia/en/b/bc/Interstellar_film_poster.jpg\"\n  //           },\n          \n  //         {\n  //           title:\"Avatar\",\n  //           poster:\"https://upload.wikimedia.org/wikipedia/en/b/bc/Interstellar_film_poster.jpg\"\n  //         }\n  //       ]\n  //     })\n  //   }, 3000);\n  // }\n\n  componentDidMount(){\n    // fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n    // .then(response => response.json())\n    // .then(response => console.log(response))\n    // .catch(err => console.log(err))\n    this._getMovies();\n  }\n\n  _renderMovies=() => {\n    const movies = this.state.movies.map(movie=> {\n      console.log(movie)\n      return <Movie \n      title={movie.title_english}\n      poster={movie.medium_cover_image} \n      key={movie.id} \n      genres={movie.genres}\n      synopsis={movie.synopsis}/>\n    })\n    return movies\n  }\n\n  _getMovies= async() => {\n    //callapi의 return value가 무엇이든 movies에 set \n    const movies=await this._callapi()\n    this.setState({\n      movies\n    })\n  }\n\n  _callapi=() => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}